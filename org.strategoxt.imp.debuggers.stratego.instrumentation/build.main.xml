<?xml version="1.0" encoding="UTF-8" ?>

<project name="org.strategoxt.imp.debuggers.stratego.instrumentation" default="release" basedir=".">

	<!-- Import Ant contrib -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
    <!-- Import instrumentation Ant contributions -->
    <import file="ant-contrib/strategoxt-contrib-util.xml" />
    <import file="ant-contrib/dsldi-contrib.xml" />
	
    <!-- instrumentation properties -->
    <!-- targetdir equals the sourcedir because instrumentation phase is a separate step 
    (and not yet integrated in the strj compiler) --> 
    <property name="str.debug.instrumentation.sourcedir" value="trans" />
    <property name="str.debug.instrumentation.targetdir" value="trans" />
    <property name="stratego.spoofax.debug.library.base" value="include" />

    <property name="str.instrumentation.enabled" value="false" />
	
    <!-- put required libraries on path when compiling Stratego to Java -->
    <property name="str.debug.runtime.args.default" value="-I ${stratego.spoofax.debug.library.base} -la org.strategoxt.imp.debuggers.stratego.runtime.strategies" />
    <condition property="str.debug.runtime.args" value="${str.debug.runtime.args.default}" else="">
        <!--<isset property="instrument.me"/>-->
        <!-- explicitly check for "true" -->
        <equals arg1="true" arg2="${str.instrumentation.enabled}" />
    </condition>
	
	<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	
	<property name="strmodule-name" value="stratego-instrumentation"/>
	<property name="jar.name" value="stratego-di"/>
	
	<property name="str-src.dir" value="trans"/>
	<property name="str-lib.dir" value="lib"/>
	<property name="str-include.dir" value="include"/>
	<property name="build.dir" value="build"/>
	
	<property name="java-wrapper-src.dir" value="src" />
	
	<property name="java-src.gen.dir" value="${build.dir}/java-gen"/>
	<property name="classes.dir" value="${build.dir}/classes"/>
	<property name="jar.dir" value="${build.dir}/jar"/>
	
	<property name="package-root-name" value="org.strategoxt.imp.debuggers.stratego.instrumentation"/>
	<property name="package-root-dir" value="org/strategoxt/imp/debuggers/stratego/instrumentation"/>
	
	<loadproperties srcFile="config.properties" />
	
	<!-- classpath for strj compiler -->
	<path id="strategoxt.jar.libraryclasspath">
	    <pathelement location="utils/strategoxt.jar"/>
	</path>
	
	<!-- classpath for compiling java, requires libdsldi, strategoxt and stratego_sugar -->
	<path id="compile-java.classpath">
	<!-- <pathelement location="utils/dsldi-java.jar"/> -->
	<!--	<pathelement location="utils/dsldi.jar"/> -->

		<!-- o.s.i.d.stratego.runtime.jar contains native java code used by runtime and is referenced by stratego-di.jar -->
		<pathelement location="utils/org.strategoxt.imp.debuggers.stratego.runtime.jar" />
		
		<!-- libdsldi.jar is the generic instrumentation library -->
		<pathelement location="utils/libdsldi.jar"/>
	   	
		<path refid="strategoxt.jar.libraryclasspath" />
		
		<!-- stratego_sugar.jar contains strategies for parsing/writing/validating stratego code -->
		<!-- all classes are in the trans-package, we will most likely get conflicts -->
		<pathelement location="utils/stratego_sugar.jar"/> 
	</path>
	
    <property name="build.stratego.args" value="
                    -I &quot;${basedir}/${str-src.dir}&quot;
                    -I &quot;${basedir}&quot;
                    -la stratego-lib 
                    -la stratego-sglr 
                    -la stratego-gpp 
                    -la stratego-xtc 
                    -la stratego-aterm
                    ${str.debug.runtime.args}
    	"/>

	<property name="skip.update" value="true" />
	<target name="update-libraries" depends="update-dsldi, update-stratego-sugar" unless="skip.update"/>
	<target name="update-dsldi" unless="skip.update">
		<!-- TODO: Empty entire utils directory -->
		<copy file="${dsldi.home}/dist/libdsldi.rtree" todir="lib" preservelastmodified="true" overwrite="true" />
        <copy todir="utils" preservelastmodified="true" overwrite="true">
            <fileset dir="${dsldi.home}/dist" includes="*.jar"/>
        </copy>
	</target>
	<target name="update-stratego-sugar" unless="skip.update">
        <copy file="${stratego.project}/include/stratego_sugar-java.jar" todir="utils" overwrite="true"/>
        <copy file="${stratego.project}/include/stratego_sugar.jar" todir="utils" overwrite="true"/>
		<copy file="${stratego.project}/include/Stratego-Sugar.tbl" todir="include" overwrite="true" />
	</target>
	
    <!-- Stratego to Java compiler -->
    <target name="generate-java">
    	<echo message="Generating Java from Stratego" />
        <!-- before compiling str to Java, we might have to instrument the stratego code -->
        <if>
            <equals arg1="${str.instrumentation.enabled}" arg2="true" />
            <then>
                <touch file="${basedir}/${str-src.dir}/${strmodule-name}.str" />
                <antcall target="instrument-all" />
            </then>
        </if>
        <antcall target="stratego.jvm.helper">
            <param name="build.stratego.outputfile" value="${java-src.gen.dir}/${package-root-dir}/Main.java"/>
        	<!-- do "-la trans" to include packages from stratego_sugar.jar, unfortunatly this fails because Main is in both java-jars.... -->
            <param name="build.stratego.extraargs" value="-la java-front -la org.strategoxt.imp.debug.instrumentation.trans -la org.strategoxt.strc"/>
        </antcall>
    </target>
	
	<!-- Compile stratego code to java helper target-->
    <target name="stratego.jvm.helper">
    	<mkdir dir="${basedir}/${java-src.gen.dir}/${package-root-dir}"/>
        <java classname="org.strategoxt.strj.Main" failonerror="true" fork="true">
        	<jvmarg value="-ss4m"/>
        	<classpath refid="strategoxt.jar.libraryclasspath" />
            <arg value="-i"/>
            <arg value="${basedir}/${str-src.dir}/${strmodule-name}.str"/>
            <arg value="-o"/>
        	<arg value="${basedir}/${build.stratego.outputfile}"/>
        	<!-- argument p is used to specify the name of the java package -->
            <arg value="-p"/>
            <arg value="${package-root-name}"/>
        	<arg value="--main"/>
        	<arg value="stratego-di-cli-main"/>
            <arg value="--library"/>
            <arg value="--clean"/>
            <arg line="${build.stratego.args}"/>
            <arg line="${build.stratego.extraargs}"/>
<!--            <arg line="${externaljarflags}"/>-->
<!--            <arg line="${externaldefimport}"/>-->
            <arg line="-I &quot;${basedir}&quot; -I &quot;${basedir}/${str-lib.dir}&quot; -I &quot;${basedir}/${str-include.dir}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
        </java>
    </target>
	
	<!-- Compile java -->
	<target name="compile-java" depends="generate-java">
    	<echo message="Compiling Java" />
    	<mkdir dir="${classes.dir}"/>
        <javac destdir="${classes.dir}" source="1.5" target="1.5" debug="on">
        	<src path="${java-src.gen.dir}" />
        	<src path="${java-wrapper-src.dir}"/>
        	<classpath refid="compile-java.classpath" />
        	<classpath path="${java-src.gen.dir}" />
    	</javac>
        <!-- copy imported terms -->
        <copy todir="${classes.dir}">
            <fileset dir="${java-src.gen.dir}" excludes="**/*.java"/>
        </copy>
	</target>
	
	<!-- make jar -->
    <target name="jar" depends="compile-java">
        <echo message="Making jars..."/>
    	<mkdir dir="${jar.dir}"/>
        <jar basedir="${classes.dir}" destfile="${jar.dir}/${jar.name}.tmp.jar"/>
        <move file="${jar.dir}/${jar.name}.tmp.jar" tofile="${jar.dir}/${jar.name}.jar"/>
    </target>

	<!-- make jar with source -->
    <target name="jar-source">
        <jar destfile="${jar.dir}/${jar.name}-source.tmp.jar">
            <fileset dir="${java-src.gen.dir}">
            </fileset>
            <fileset dir="${java-wrapper-src.dir}">
            </fileset>
        </jar>
        <move file="${jar.dir}/${jar.name}-source.tmp.jar" tofile="${jar.dir}/${jar.name}-source.jar" />
    </target>
	
	
    <target name="clean">
    	<!-- clean generated java -->
    	<echo message="removing ${java-src.gen.dir}" />
        <delete failonerror="false">
            <fileset dir="${java-src.gen.dir}" />
        </delete>
    	<!-- clean class files -->
    	<echo message="removing ${classes.dir}" />
        <delete failonerror="false">
            <fileset dir="${classes.dir}" />
        </delete>
    </target>
	
    <target name="release" depends="clean, update-libraries, jar, jar-source" />
</project>
