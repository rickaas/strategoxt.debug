module instrument/generate-step

imports
    include/Stratego-Sugar
    
// sel imports
imports
  lib/libdsldi

imports instrument/util
imports instrument/generate-str-statements

imports lib/stratego_sugar // for "position-of-term" ?

strategies
/**
 * Strategies can be passed as arguments
 E.g. : main = foo(stuff)
 foo(s1) = s1(debug | "asdf")
 stuff(s|t) = where(debug(!"(s|t)")); id
 
 * Strategy stuff takes a strategy and a term argument
 * If we instrument the foo(stuff) as foo(my-event; stuff) then (my-event; stuff) is most likely lifted
 * In this case we get a failure because the lifted strategy isn't aware of the arguments it will be given.
 * So how do we fix this? Below are some ideas...
 * 1. Some higher order strategies (e.g. unescape) contain type information about the strategy-arguments.
 * We have to detect if the current strategy is used as a strategy-argument in another strategy call.
 * We have to extract the parent and then try to find the corresponding strategy signature with the type information. 
 * This requires us to store the signatures of all strategies. This will most likely lead to performance issues.
 * 2. We always skip s-step events in strategy-call arguments when the argument is a single strategy.
 * When chained strategies are used as argument, e.g. s1(s2;s3|t1), we can safely add s-step events.
 * 3. We lift the arguments to a new anonymous strategy, but we still need to determine the number of arguments.
 * 4. Use annotations to blacklist strategies that accept higher order arguments
 */
    gen-step:
        strategy -> instrumented-strategy
        where
            id
            // ; debug; GET-DSL-PROGRAM-SOURCE
            // RL: disabled because lib-position-of-term always returns the first occurance (value-equals is used)
            // ; lib-position-of-term(?strategy) => my-position// find the position of the current term in the source ast
            // ; debug
            // ; lib-parent-position => position-of-parent; debug // position of parent
            // ; lib-parent-position => position-of-grandparent; debug
            // ; GET-DSL-PROGRAM-SOURCE
            // ; lib-term-at-position(|position-of-parent) => parent ; debug(!"P: ")
            // ; GET-DSL-PROGRAM-SOURCE
            // ; lib-term-at-position(|position-of-grandparent) => grandparent ; debug(!"GP: ")
            // // determine if strategy is used as an argument (the parent of the current ATerm is a strategy call)
            // // and try to find the signature of the parent strategy call
            // ; not(<skip-step-instr(|<last;inc;debug>my-position)> grandparent)
            ; debug-information := <GET-CURRENT-DEBUG-INFORMATION> strategy // debug-information := (filename, a, b, c, d)
            ;?(filename, a, b, c, d)
            ; program-filename := $["[filename]"]
            ; location := <map(\item -> $["[item]"]\)> [a,b,c,d]
            ; step-event := <create-step-call(|program-filename, location)>
            ; instrumented-strategy := <insert-step-event(|step-event)> strategy
              
    insert-step-event(|step-event) :
        s -> s'
        where
            s' := Seq(step-event, s)


    // Call(SVar("do-foo"),[CallNoArgs(SVar("foo1"))])
    skip-step-instr(|s-arg-index) :
        c@Call(_, s-args*) -> c
        where
            <is-list> s-args*
            ; index(|s-arg-index)
            ; is-call
    skip-step-instr(|s-arg-index) :
        c@CallT(_,s-args*,_) -> c
        where
            <is-list> s-args*
            ; index(|s-arg-index)
            ; is-call
              
    is-call :
        c@Call(_, _) -> c
    is-call :
        c@CallT(_, _, _) -> c
    is-call :
        c@CallNoArgs(_) -> c
        
strategies
    create-step-call(|filename, location) = 
        args := <flatten-list; create-f-n-l-list> [filename, location]
        ; !CallT(SVar("s-step"), [], args)
