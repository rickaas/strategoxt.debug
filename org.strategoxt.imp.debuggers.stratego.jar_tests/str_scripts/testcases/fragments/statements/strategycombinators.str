module strategycombinators

strategies

	sequential =
        s1
        ; s2
        ; s3
		  	
	left-choice = s1 <+ (s2 <+ s3)
 	left-choice = (s1; sa) <+ ((s2; sb) <+ (s3; sc))
 		
 	guarded-choice = s1 < s2 + s3
 	guarded-choice = (s1; sa) < (s2; sb) + (s3; sc)
 	
 	if-then-else = if s1 then s2 else s3 end
 	if-then-else = if (s1; sa) then (s2; sb) else (s3; sc) end
 	
 	if-then = if s1 then s2 end
 	if-then = if (s1; sa) then (s2; sb) end
 	
 	test-switch = 
		switch s0
		    case s1 : s1'
		    case s2 : s2'
		    otherwise : sdef
  		end
  		
 	test-switch = 
		switch s0
		    case s1 : s1'
		    case s2 : s2'
		    case s3 : s3'
		    otherwise : sdef
  		end
  		
  	test-switch = 
		switch s0
		    case s1 : s1'; sa'
		    case s2 : s2'; sb'
		    otherwise : sdef; sdef'
  		end

 	test-switch = 
		switch s0
		    case s1 : s1'
		    case s2 : s2'
		    case s3 : s3'
  		end
  		  		
	non-deter-choice = s1 + s2
	non-deter-choice = (s1; sa) + (s2; sb)
	
	f(s) = s1; f(s); s2
	f(s) = rec x(s1; x; s2)
	
	g(s) = foo; rec x(s1; x; s2); bar // he strategy between foo and bar is a recursive strategy that does not recurse to g(s).
	
	build-term = s1; !Int("3"); s2
	
	match-term = s1; ?Int(foo); s2
	
	SwapArgs1 = {e1,e2 : (Plus(e1,e2) -> Plus(e2,e1))}
	
	SwapArgs2 = (Plus(e1,e2) -> Plus(e2,e1))
	
	l-1 = ![(1,2),(3,4),(5,6)]; map(\ (x, y) -> x \ ); debug(!"") // [1,3,5]]
	
	let-1 = s1; let dnf-rules = DefI <+ DefE <+ DAOL <+ DAOR <+ DN <+ DMA <+ DMO
 					in innermost(dnf-rules)
				end; s2

	let-2 = let  SwapArgs = (Plus(e1,e2) -> Plus(e2,e1))  in !Plus(Int("1"), Int("2")); SwapArgs; debug(!"")  end