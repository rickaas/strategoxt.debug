Module(
  "testfail"
, [ Signature(
      [ Constructors(
          [ OpDecl(
              "Var"
            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Expression")))
            )
          , OpDecl(
              "Number"
            , FunType([ConstType(SortNoArgs("Int"))], ConstType(SortNoArgs("Expression")))
            )
          , OpDecl(
              "Add"
            , FunType(
                [ConstType(SortNoArgs("Expression")), ConstType(SortNoArgs("Expression"))]
              , ConstType(SortNoArgs("Expression"))
              )
            )
          , OpDecl(
              "Sub"
            , FunType(
                [ConstType(SortNoArgs("Expression")), ConstType(SortNoArgs("Expression"))]
              , ConstType(SortNoArgs("Expression"))
              )
            )
          , OpDecl(
              "Print"
            , FunType([ConstType(SortNoArgs("Expression"))], ConstType(SortNoArgs("Statement")))
            )
          , OpDecl(
              "Assign"
            , FunType(
                [ConstType(SortNoArgs("String")), ConstType(SortNoArgs("Expression"))]
              , ConstType(SortNoArgs("Statement"))
              )
            )
          , OpDecl(
              "Function"
            , FunType(
                [ConstType(SortNoArgs("String")), ConstType(Sort("List", [SortNoArgs("Statement")]))]
              , ConstType(SortNoArgs("Definition"))
              )
            )
          , OpDecl(
              "Comment"
            , FunType(
                [ConstType(SortNoArgs("String")), ConstType(SortNoArgs("String"))]
              , ConstType(SortNoArgs("Definition"))
              )
            )
          , OpDecl(
              "Program"
            , FunType(
                [ConstType(SortNoArgs("String")), ConstType(Sort("List", [SortNoArgs("Definition")]))]
              , ConstType(SortNoArgs("Program"))
              )
            )
          ]
        )
      ]
    )
  , Strategies(
      [SDefNoArgs(
         "main"
       , Call(SVar("io-wrap"), [CallNoArgs(SVar("execute"))])
       )]
    )
  , Rules(
      [ RDefNoArgs(
          "execute"
        , Rule(
            Var("input")
          , Var("output")
          , LChoice(
              Seq(
                Assign(Var("i'"), Var("create-input"))
              , Assign(Var("output"), Var("test-i"))
              )
            , CallNoArgs(SVar("test-i2"))
            )
          )
        )
      , RDefNoArgs(
          "test-i2"
        , Rule(
            Var("input")
          , Var("output")
          , [WithClause(Assign(Var("output"), RootApp(Fail())))]
          )
        )
      , SDefT(
          "test-ii2"
        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
        , [DefaultVarDec("t")]
        , GuardedLChoice(
            LRule(
              Rule(
                Var("input")
              , Var("output")
              , [ WithClause(
                    Seq(
                      Assign(Var("output"), RootApp(Fail()))
                    , Assign(Var(ListVar("test")), Var("t"))
                    )
                  )
                ]
              )
            )
          , CallNoArgs(SVar("s1"))
          , Seq(CallNoArgs(SVar("s2")), Fail())
          )
        )
      ]
    )
  , Strategies(
      [ SDefNoArgs(
          "create-input"
        , Build(NoAnnoList(List([NoAnnoList(Str("\"fda\""))])))
        )
      , SDefNoArgs("is-empty", Match(NoAnnoList(List([]))))
      , SDefNoArgs("test-i", CallNoArgs(SVar("is-empty")))
      , SDef(
          "create-fail"
        , [DefaultVarDec("s")]
        , Seq(CallNoArgs(SVar("s")), Fail())
        )
      , SDef(
          "test-fail"
        , [DefaultVarDec("s1"), DefaultVarDec("s2"), DefaultVarDec("s3")]
        , GuardedLChoice(
            CallNoArgs(SVar("s1"))
          , CallNoArgs(SVar("s2"))
          , CallNoArgs(SVar("s3"))
          )
        )
      ]
    )
  ]
)