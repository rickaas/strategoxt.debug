// compile to library
// strj -i strategodebuglib.str -o java/org/libstrategodebuglib/strategodebuglib.java -p org.libstrategodebuglib --library --clean --library -la stratego-lib


// strj -i strategodebuglib.str -o libstrategodebuglib.ctree -p libstrategodebuglib --library --clean --library -la stratego-lib -F


// strj -i stratego-debug-lib.str  --library --clean -p org.strategoxt.debug_lib -o java/org/strategoxt/debug_lib/Main.java -la stratego-lib

// strj -i strategodebuglib.str -o strategodebuglib.ctree -p strategodebuglib --library --clean --library -la stratego-lib -F
// create jar file
// in bin dir:
// jar -cf debug_lib.jar ./org/strategoxt/debug_lib/*.class

module stratego/strategodebugruntime

imports
	libstrategolib
	stratego/external-calls


signature
  sorts
    LocationInfo
    
  constructors
	LocationInfo : String * String * String * String -> LocationInfo

rules
	// Location(start-line-num, start-token-pos, end-line-num, end-token-pos)
	loc-to-string:
		LocationInfo(start-line-num, start-token-pos, end-line-num, end-token-pos) -> <concat-strings> [start-line-num, ",", start-token-pos, ",", end-line-num, ",", end-token-pos]
		
	name-loc-to-string:
		(name, loc) -> <concat-strings> [name, <loc-to-string> loc]
	
	
	// strategy enter
    s-enter(|filename, s-name, loc) :
    	t -> t'
    	//where (<debug(!"s-enter: ")> <to-string> (s-name, loc))
    	where (t' := <java-s-enter(|filename, s-name, loc, t)>)
    
    // strategy exit
    s-exit(|filename, s-name, loc) :
    	t -> t'
    	//where (<debug(!"s-exit: ")> <to-string> (s-name, loc))
    	where (t' := <java-s-exit(|filename, s-name, loc, t)>)
    	
    // rule enter
    r-enter(|filename, r-name, loc) :
    	t -> t'
    	//where (<debug(!"r-enter : ")> <to-string> (r-name, loc))
    	where (t' := <java-r-enter(|filename, r-name, loc, t)>)
    
    // rule exit
    r-exit(|filename, r-name, loc) :
    	t -> t'
    	//where (<debug(!"r-exit: ")> <to-string> (r-name, loc))
    	where (t' := <java-r-exit(|filename, r-name, loc, t)>)
    	
    // step
    s-step(|filename, loc) :
    	t -> t'
    	//where (<debug(!"s-step: ")> <to-string> (name, loc))
    	where (t' := <java-s-step(|filename, loc, t)>)
    	
    // variable assignment
    s-var(|filename, var-name, loc):
    	t -> t'
    	//where (<debug(!"s-var: ")> <to-string> (name, loc))
    	where (t' := <java-s-var(|filename, var-name, loc, t)>)
    	
    // where or with clause fails in rule
    s-fail(|filename, loc):
    	t -> t'
    		where (t' := <java-s-fail(|filename, loc, t)>)
	