module stratego/strategodebugruntime

imports
	libstrategolib
	stratego/external-calls

signature
  sorts
    LocationInfo
    
  constructors
	LocationInfo : String * String * String * String -> LocationInfo

// Important! We should NOT call to strategies in libstrategolib (or another library) 
// that are instrumented otherwise we will get into an infinite loop 
// which eventually leads to a StackOverflowError
rules
	// Location(start-line-num, start-token-pos, end-line-num, end-token-pos)
	loc-to-string:
		LocationInfo(start-line-num, start-token-pos, end-line-num, end-token-pos) -> value
		with
		    strings := [start-line-num, ",", start-token-pos, ",", end-line-num, ",", end-token-pos]
		    ; value := <prim("SSL_concat_strings", strings)>
		
	loc-tuple-to-string:
        (start-line-num, start-token-pos, end-line-num, end-token-pos) -> value
        with
            strings := [start-line-num, ",", start-token-pos, ",", end-line-num, ",", end-token-pos]
            ; value := <prim("SSL_concat_strings", strings)>

	name-loc-to-string:
		(name, loc) -> value
		with
		    strings := [name, <loc-to-string> loc]
		    ; value := <prim("SSL_concat_strings", strings)>
	
	
	// strategy enter
    s-enter(|filename, s-name, loc) :
    	t -> t'
    	//where (<debug(!"s-enter: ")> <to-string> (s-name, loc))
    	where (t' := <java-s-enter(|filename, s-name, loc, t)>)
    
    // strategy exit
    s-exit(|filename, s-name, loc) :
    	t -> t'
    	//where (<debug(!"s-exit: ")> <to-string> (s-name, loc))
    	where (t' := <java-s-exit(|filename, s-name, loc, t)>)
    	
    // rule enter
    r-enter(|filename, r-name, loc) :
    	t -> t'
    	//where (<debug(!"r-enter : ")> <to-string> (r-name, loc))
    	where (t' := <java-r-enter(|filename, r-name, loc, t)>)
    
    // rule exit
    r-exit(|filename, r-name, loc) :
    	t -> t'
    	//where (<debug(!"r-exit: ")> <to-string> (r-name, loc))
    	where (t' := <java-r-exit(|filename, r-name, loc, t)>)
    	
    // step
    s-step(|filename, loc) :
    	t -> t'
    	//where (<debug(!"s-step: ")> <to-string> (name, loc))
    	where (t' := <java-s-step(|filename, loc, t)>)
    	
    // variable assignment
    s-var(|filename, var-name, loc):
    	t -> t'
    	//where (<debug(!"s-var: ")> <to-string> (name, loc))
    	where (t' := <java-s-var(|filename, var-name, loc, t)>)
    	
    // where or with clause fails in rule
    s-fail(|filename, loc):
    	t -> t'
    		where (t' := <java-s-fail(|filename, loc, t)>)
    		
rules
// compiling strategoxt in java: Too many constants, the constant pool for Main would exceed 65536 entries
// This is due to the fact that the location info string is a constant.
// By breaking of the location info string in separate numbers we won't hit that number soon (unless we have a file with 65536 lines)
    
    // strategy enter
    s-enter(|filename, s-name, a, b, c, d) :
        t -> t'
        //where (<debug(!"s-enter: ")> <to-string> (s-name, loc))
        where (t' := <java-s-enter(|filename, s-name, <loc-tuple-to-string> (a,b,c,d), t)>)
    
    // strategy exit
    s-exit(|filename, s-name, a, b, c, d) :
        t -> t'
        //where (<debug(!"s-exit: ")> <to-string> (s-name, loc))
        where (t' := <java-s-exit(|filename, s-name, <loc-tuple-to-string> (a,b,c,d), t)>)
        
    // rule enter
    r-enter(|filename, r-name, a, b, c, d) :
        t -> t'
        //where (<debug(!"r-enter : ")> <to-string> (r-name, loc))
        where (t' := <java-r-enter(|filename, r-name, <loc-tuple-to-string> (a,b,c,d), t)>)
    
    // rule exit
    r-exit(|filename, r-name, a, b, c, d) :
        t -> t'
        //where (<debug(!"r-exit: ")> <to-string> (r-name, loc))
        where (t' := <java-r-exit(|filename, r-name, <loc-tuple-to-string> (a,b,c,d), t)>)
        
    // step
    s-step(|filename, a, b, c, d) :
        t -> t'
        //where (<debug(!"s-step: ")> <to-string> (name, loc))
        where (t' := <java-s-step(|filename, <loc-tuple-to-string> (a,b,c,d), t)>)
        
    // variable assignment
    s-var(|filename, var-name, a, b, c, d):
        t -> t'
        //where (<debug(!"s-var: ")> <to-string> (name, loc))
        where (t' := <java-s-var(|filename, var-name, <loc-tuple-to-string> (a,b,c,d), t)>)
        
    // where or with clause fails in rule
    s-fail(|filename, a, b, c, d):
        t -> t'
            where (t' := <java-s-fail(|filename, <loc-tuple-to-string> (a,b,c,d), t)>)
	